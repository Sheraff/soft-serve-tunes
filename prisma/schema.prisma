generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

model File {
  id        String   @id @default(cuid())
  path      String
  size      Int
  ino       BigInt   @unique
  container String
  duration  Float
  addedAt   DateTime @default(now())
  createdAt DateTime
  updatedAt DateTime
  birthTime DateTime
  trackId   String   @unique
  track     Track    @relation(fields: [trackId], references: [id])
}

model Track {
  id         String        @id @default(cuid())
  name       String
  artists    TrackArtist[] @relation
  albums     AlbumTrack[]  @relation
  popularity Int?
  createdAt  DateTime      @default(now())
  file       File?         @relation
  year       Int?
  genres     TrackGenre[]  @relation
  pictureId  String?
  picture    Cover?        @relation(fields: [pictureId], references: [id])
}

model Cover {
  id     String  @id @default(cuid())
  data   Bytes   @unique
  mime   String
  tracks Track[] @relation
}

model TrackArtist {
  id       String @id @default(cuid())
  trackId  String
  artistId String
  track    Track  @relation(fields: [trackId], references: [id])
  artist   Artist @relation(fields: [artistId], references: [id])

  @@unique([trackId, artistId])
}

model Artist {
  id        String        @id @default(cuid())
  name      String        @unique
  tracks    TrackArtist[] @relation
  createdAt DateTime      @default(now())
  albums    AlbumArtist[] @relation
}

model AlbumTrack {
  id       String @id @default(cuid())
  position Int
  albumId  String
  trackId  String
  album    Album  @relation(fields: [albumId], references: [id])
  track    Track  @relation(fields: [trackId], references: [id])

  @@unique([albumId, trackId])
}

model AlbumArtist {
  id       String @id @default(cuid())
  position Int
  albumId  String
  artistId String
  album    Album  @relation(fields: [albumId], references: [id])
  artist   Artist @relation(fields: [artistId], references: [id])

  @@unique([albumId, artistId])
}

model Album {
  id          String        @id @default(cuid())
  name        String
  artists     AlbumArtist[] @relation()
  tracksCount Int
  createdAt   DateTime      @default(now())
  tracks      AlbumTrack[]  @relation
  year        Int
}

model TrackGenre {
  id       String @id @default(cuid())
  position Int
  trackId  String
  genreId  String
  track    Track  @relation(fields: [trackId], references: [id])
  genre    Genre  @relation(fields: [genreId], references: [id])

  @@unique([trackId, genreId])
}

model Genre {
  id        String       @id @default(cuid())
  name      String
  tracks    TrackGenre[] @relation
  subgenres GenreJoint[] @relation(name: "supgenre")
  supgenres GenreJoint[] @relation(name: "subgenre")
}

model GenreJoint {
  id         String @id @default(cuid())
  supgenreId String
  supgenre   Genre  @relation(fields: [supgenreId], references: [id], name: "supgenre")
  subgenreId String
  subgenre   Genre  @relation(fields: [subgenreId], references: [id], name: "subgenre")

  @@unique([supgenreId, subgenreId])
}
