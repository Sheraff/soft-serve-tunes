generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model File {
  id        String   @id @default(cuid())
  path      String   @unique
  size      Int
  ino       BigInt   @unique
  container String
  duration  Float
  addedAt   DateTime @default(now())
  createdAt DateTime
  updatedAt DateTime
  birthTime DateTime
  trackId   String   @unique
  track     Track    @relation(fields: [trackId], references: [id])
}

model Track {
  id         String        @id @default(cuid())
  name       String
  artistId   String?
  artist     Artist?       @relation(fields: [artistId], references: [id])
  feats      Artist[]      @relation("Featuring")
  albumId    String?
  album      Album?        @relation(fields: [albumId], references: [id])
  position   Int?
  popularity Int?
  createdAt  DateTime      @default(now())
  file       File?         @relation
  year       Int?
  genres     Genre[]       @relation
  pictureId  String?
  picture    Cover?        @relation(fields: [pictureId], references: [id])
  lastfm     LastFmTrack?  @relation
  audiodb    AudioDbTrack? @relation
  playcount  Int           @default(0)
  favourite  Boolean       @default(false)

  @@unique([name, artistId, albumId])
}

model Cover {
  id     String  @id @default(cuid())
  data   Bytes   @unique
  mime   String
  tracks Track[] @relation
}

model Artist {
  id        String         @id @default(cuid())
  name      String         @unique
  tracks    Track[]        @relation
  feats     Track[]        @relation("Featuring")
  createdAt DateTime       @default(now())
  albums    Album[]        @relation
  lastfm    LastFmArtist?  @relation
  audiodb   AudioDbArtist? @relation
}

model Album {
  id          String        @id @default(cuid())
  name        String
  artistId    String?
  artist      Artist?       @relation(fields: [artistId], references: [id])
  tracksCount Int?
  createdAt   DateTime      @default(now())
  tracks      Track[]       @relation
  year        Int?
  lastfm      LastFmAlbum?  @relation
  audiodb     AudioDbAlbum? @relation

  @@unique([name, artistId])
}

model Genre {
  id        String  @id @default(cuid())
  name      String  @unique
  tracks    Track[] @relation
  subgenres Genre[] @relation("LinkedGenre")
  supgenres Genre[] @relation("LinkedGenre")
}

model LastFmTrack {
  id        String        @id @default(cuid())
  entityId  String        @unique
  entity    Track         @relation(fields: [entityId], references: [id])
  url       String        @unique
  albumId   String?
  album     LastFmAlbum?  @relation(fields: [albumId], references: [id])
  artistId  String?
  artist    LastFmArtist? @relation(fields: [artistId], references: [id])
  tags      LastFmTag[]
  duration  Int
  listeners Int
  playcount Int
  mbid      String?
  name      String
}

model LastFmAlbum {
  id          String        @id @default(cuid())
  entityId    String        @unique
  entity      Album         @relation(fields: [entityId], references: [id])
  url         String        @unique
  tracks      LastFmTrack[]
  artistId    String?
  artist      LastFmArtist? @relation(fields: [artistId], references: [id])
  mbid        String?
  tags        LastFmTag[]
  image       String?
  name        String
  releasedate DateTime?
  listeners   Int
  playcount   Int
}

model LastFmArtist {
  id        String        @id @default(cuid())
  entityId  String        @unique
  entity    Artist        @relation(fields: [entityId], references: [id])
  url       String        @unique
  tracks    LastFmTrack[]
  albums    LastFmAlbum[]
  mbid      String?
  tags      LastFmTag[]
  name      String
  image     String?
  listeners Int
  playcount Int
}

model LastFmTag {
  id      String         @id @default(cuid())
  url     String         @unique
  name    String         @unique
  tracks  LastFmTrack[]
  artists LastFmArtist[]
  albums  LastFmAlbum[]
}

model AudioDbArtist {
  // https://www.theaudiodb.com/api/v1/json/2/search.php?s={{artist-name-exact}}
  // https://theaudiodb.com/api/v1/json/2/artist.php?i={{artist-id}}
  idArtist Int    @id
  entityId String @unique
  entity   Artist @relation(fields: [entityId], references: [id])

  strArtist        String  @unique
  intFormedYear    Int?
  intBornYear      Int?
  strMusicBrainzID String?
  strBiographyEN   String?

  strArtistThumb     String?
  strArtistLogo      String?
  strArtistCutout    String?
  strArtistClearart  String?
  strArtistWideThumb String?
  strArtistBanner    String?

  albums AudioDbAlbum[]
}

model AudioDbAlbum {
  // https://theaudiodb.com/api/v1/json/2/album.php?i={{album-id}}
  idAlbum  Int           @id
  strAlbum String
  idArtist Int
  artist   AudioDbArtist @relation(fields: [idArtist], references: [idArtist])
  entityId String?       @unique
  entity   Album?        @relation(fields: [entityId], references: [id])

  strMusicBrainzID String?
  strDescriptionEN String?
  intYearReleased  Int?

  strAlbumThumb   String?
  strAlbumThumbHQ String?
  strAlbumCDart   String?

  strAllMusicID      String?
  strBBCReviewID     String?
  strRateYourMusicID String?
  strDiscogsID       String?
  strWikidataID      String?
  strWikipediaID     String?
  strGeniusID        String?
  strLyricWikiID     String?
  strMusicMozID      String?
  strItunesID        String?
  strAmazonID        String?

  tracks AudioDbTrack[]
}

model AudioDbTrack {
  // https://theaudiodb.com/api/v1/json/2/track.php?m={{album-id}} (obtains list of track for entire album)
  idTrack  Int          @id
  strTrack String
  idAlbum  Int
  album    AudioDbAlbum @relation(fields: [idAlbum], references: [idAlbum])
  entityId String?      @unique
  entity   Track?       @relation(fields: [entityId], references: [id])

  intDuration      Int?
  strGenre         String?
  strTrackThumb    String?
  strMusicVid      String?
  intTrackNumber   Int?
  strMusicBrainzID String?
}
