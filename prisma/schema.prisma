generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model File {
  id        String   @id @default(cuid())
  path      String   @unique
  size      Int
  ino       BigInt   @unique
  container String
  duration  Float
  addedAt   DateTime @default(now())
  createdAt DateTime
  updatedAt DateTime
  birthTime DateTime
  trackId   String   @unique
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
}

model Track {
  id          String        @id @default(cuid())
  name        String
  artistId    String?
  artist      Artist?       @relation(fields: [artistId], references: [id])
  feats       Artist[]      @relation("Featuring")
  albumId     String?
  album       Album?        @relation(fields: [albumId], references: [id])
  position    Int?
  popularity  Int?
  createdAt   DateTime      @default(now())
  file        File?         @relation
  year        Int?
  genres      Genre[]       @relation
  lastfm      LastFmTrack?  @relation
  audiodb     AudioDbTrack? @relation
  playcount   Int           @default(0)
  favourite   Boolean       @default(false)
  metaImageId String?
  metaImage   Image?        @relation(fields: [metaImageId], references: [id])
  spotify     SpotifyTrack? @relation

  @@unique([name, artistId, albumId])
}

model Image {
  id                     String          @id
  path                   String          @unique
  mimetype               String
  track                  Track[]         @relation
  lastfmAlbum            LastFmAlbum[]   @relation
  lastfmArtist           LastFmArtist[]  @relation
  audiodbTrack           AudioDbTrack[]  @relation
  audiodbArtistThumb     AudioDbArtist[] @relation(name: "thumb")
  audiodbArtistLogo      AudioDbArtist[] @relation(name: "logo")
  audiodbArtistCutout    AudioDbArtist[] @relation(name: "cutout")
  audiodbArtistClearart  AudioDbArtist[] @relation(name: "clearart")
  audiodbArtistWideThumb AudioDbArtist[] @relation(name: "wideThumb")
  audiodbArtistBanner    AudioDbArtist[] @relation(name: "banner")
  audiodbAlbumThumb      AudioDbAlbum[]  @relation(name: "thumb")
  audiodbAlbumThumbHq    AudioDbAlbum[]  @relation(name: "thumbHq")
  audiodbAlbumCdArt      AudioDbAlbum[]  @relation(name: "cdArt")
  spotifyArtist          SpotifyArtist[] @relation
  spotifyAlbum           SpotifyAlbum[]  @relation
}

model Artist {
  id        String         @id @default(cuid())
  name      String         @unique
  tracks    Track[]        @relation
  feats     Track[]        @relation("Featuring")
  createdAt DateTime       @default(now())
  albums    Album[]        @relation
  lastfm    LastFmArtist?  @relation
  audiodb   AudioDbArtist? @relation
  spotify   SpotifyArtist? @relation
}

model Album {
  id          String        @id @default(cuid())
  name        String
  artistId    String?
  artist      Artist?       @relation(fields: [artistId], references: [id])
  tracksCount Int?
  createdAt   DateTime      @default(now())
  tracks      Track[]       @relation
  year        Int?
  lastfm      LastFmAlbum?  @relation
  audiodb     AudioDbAlbum? @relation
  spotify     SpotifyAlbum? @relation

  @@unique([name, artistId])
}

model Genre {
  id             String          @id @default(cuid())
  name           String          @unique
  tracks         Track[]         @relation
  spotifyArtists SpotifyArtist[] @relation
  subgenres      Genre[]         @relation("LinkedGenre")
  supgenres      Genre[]         @relation("LinkedGenre")
}

model LastFmTrack {
  id        String        @id @default(cuid())
  entityId  String        @unique
  entity    Track         @relation(fields: [entityId], references: [id], onDelete: Cascade)
  url       String        @unique
  albumId   String?
  album     LastFmAlbum?  @relation(fields: [albumId], references: [id])
  artistId  String?
  artist    LastFmArtist? @relation(fields: [artistId], references: [id])
  tags      LastFmTag[]
  duration  Int
  listeners Int
  playcount Int
  mbid      String?
  name      String
}

model LastFmAlbum {
  id          String        @id @default(cuid())
  entityId    String        @unique
  entity      Album         @relation(fields: [entityId], references: [id], onDelete: Cascade)
  url         String        @unique
  tracks      LastFmTrack[]
  artistId    String?
  artist      LastFmArtist? @relation(fields: [artistId], references: [id])
  mbid        String?
  tags        LastFmTag[]
  name        String
  releasedate DateTime?
  listeners   Int
  playcount   Int
  coverUrl    String?
  coverId     String?
  cover       Image?        @relation(fields: [coverId], references: [id])
}

model LastFmArtist {
  id        String        @id @default(cuid())
  entityId  String        @unique
  entity    Artist        @relation(fields: [entityId], references: [id], onDelete: Cascade)
  url       String        @unique
  tracks    LastFmTrack[]
  albums    LastFmAlbum[]
  mbid      String?
  tags      LastFmTag[]
  name      String
  listeners Int
  playcount Int
  coverUrl  String?
  coverId   String?
  cover     Image?        @relation(fields: [coverId], references: [id])
}

model LastFmTag {
  id      String         @id @default(cuid())
  url     String         @unique
  name    String         @unique
  tracks  LastFmTrack[]
  artists LastFmArtist[]
  albums  LastFmAlbum[]
}

model AudioDbArtist {
  // https://www.theaudiodb.com/api/v1/json/2/search.php?s={{artist-name-exact}}
  // https://theaudiodb.com/api/v1/json/2/artist.php?i={{artist-id}}
  idArtist Int    @id
  entityId String @unique
  entity   Artist @relation(fields: [entityId], references: [id], onDelete: Cascade)

  strArtist        String  @unique
  intFormedYear    Int?
  intBornYear      Int?
  strMusicBrainzID String?
  strBiographyEN   String?

  strArtistThumb     String?
  thumbId            String?
  thumb              Image?  @relation(name: "thumb", fields: [thumbId], references: [id])
  strArtistLogo      String?
  logoId             String?
  logo               Image?  @relation(name: "logo", fields: [logoId], references: [id])
  strArtistCutout    String?
  cutoutId           String?
  cutout             Image?  @relation(name: "cutout", fields: [cutoutId], references: [id])
  strArtistClearart  String?
  clearartId         String?
  clearart           Image?  @relation(name: "clearart", fields: [clearartId], references: [id])
  strArtistWideThumb String?
  wideThumbId        String?
  wideThumb          Image?  @relation(name: "wideThumb", fields: [wideThumbId], references: [id])
  strArtistBanner    String?
  bannerId           String?
  banner             Image?  @relation(name: "banner", fields: [bannerId], references: [id])

  albums AudioDbAlbum[]
}

model AudioDbAlbum {
  // https://theaudiodb.com/api/v1/json/2/album.php?i={{album-id}}
  idAlbum  Int           @id
  strAlbum String
  idArtist Int
  artist   AudioDbArtist @relation(fields: [idArtist], references: [idArtist], onDelete: Cascade)
  entityId String?       @unique
  entity   Album?        @relation(fields: [entityId], references: [id])

  strMusicBrainzID String?
  strDescriptionEN String?
  intYearReleased  Int?

  strAlbumThumb   String?
  thumbId         String?
  thumb           Image?  @relation(name: "thumb", fields: [thumbId], references: [id])
  strAlbumThumbHQ String?
  thumbHqId       String?
  thumbHq         Image?  @relation(name: "thumbHq", fields: [thumbHqId], references: [id])
  strAlbumCDart   String?
  cdArtId         String?
  cdArt           Image?  @relation(name: "cdArt", fields: [cdArtId], references: [id])

  strAllMusicID      String?
  strBBCReviewID     String?
  strRateYourMusicID String?
  strDiscogsID       String?
  strWikidataID      String?
  strWikipediaID     String?
  strGeniusID        String?
  strLyricWikiID     String?
  strMusicMozID      String?
  strItunesID        String?
  strAmazonID        String?

  tracks AudioDbTrack[]
}

model AudioDbTrack {
  // https://theaudiodb.com/api/v1/json/2/track.php?m={{album-id}} (obtains list of track for entire album)
  idTrack  Int          @id
  strTrack String
  idAlbum  Int
  album    AudioDbAlbum @relation(fields: [idAlbum], references: [idAlbum], onDelete: Cascade)
  entityId String?      @unique
  entity   Track?       @relation(fields: [entityId], references: [id])

  intDuration      Int?
  strGenre         String?
  strMusicVid      String?
  intTrackNumber   Int?
  strMusicBrainzID String? // should be unique in theory, but wrong metadata on some track can cause issues

  strTrackThumb String?
  thumbId       String?
  thumb         Image?  @relation(fields: [thumbId], references: [id])
}

model SpotifyArtist {
  id         String         @id
  name       String
  imageId    String?
  image      Image?         @relation(fields: [imageId], references: [id])
  popularity Int?
  genres     Genre[]        @relation
  albums     SpotifyAlbum[] @relation
  tracks     SpotifyTrack[] @relation
  feats      SpotifyTrack[] @relation("Featuring")
  albumFeats SpotifyAlbum[] @relation("AlbumFeaturing")

  artistId String? @unique
  artist   Artist? @relation(fields: [artistId], references: [id])
}

model SpotifyAlbum {
  id          String          @id
  name        String
  albumType   String
  artistId    String?
  artist      SpotifyArtist?  @relation(fields: [artistId], references: [id])
  feats       SpotifyArtist[] @relation("AlbumFeaturing")
  imageId     String?
  image       Image?          @relation(fields: [imageId], references: [id])
  releaseDate DateTime?
  popularity  Int?
  totalTracks Int?
  tracks      SpotifyTrack[]  @relation

  albumId String? @unique
  album   Album?  @relation(fields: [albumId], references: [id])
}

model SpotifyTrack {
  id          String          @id
  name        String
  artistId    String?
  artist      SpotifyArtist?  @relation(fields: [artistId], references: [id])
  feats       SpotifyArtist[] @relation("Featuring")
  albumId     String
  album       SpotifyAlbum?   @relation(fields: [albumId], references: [id])
  popularity  Int?
  durationMs  Int?
  explicit    Boolean?
  trackNumber Int?
  discNumber  Int?

  danceability     Float?
  energy           Float?
  key              Int?
  loudness         Float?
  mode             Int?
  speechiness      Float?
  acousticness     Float?
  instrumentalness Float?
  liveness         Float?
  valence          Float?
  tempo            Float?
  timeSignature    Int?

  trackId String? @unique
  track   Track?  @relation(fields: [trackId], references: [id])
}
